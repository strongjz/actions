# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Scan image snapshot'
description: |
  This action scans an OCI image

inputs:

  image:
    description: |
      The container image into which we should publish attestation.
    required: true

  registry:
    description: |
      Which registry to use.
    default: ghcr.io
    required: false

  username:
    description: |
      The username to use for docker login step.
    default: ${{ github.repository_owner }}
    required: false

  password:
    description: |
      The token to use for docker login step.
    required: false
    default: ${{ github.token }}

  debug:
    description: |
      Enable debug logging.
    required: false
    default: "false"

  UPLOAD_GITHUB_CODE:
    description: |
      Upload Scan results to github security
    required: false
    default: "false"

  SNYK_TOKEN:
    description: |
      SNYK Token for vul scanning
    required: true

  RUN_SNYK:
    description: Run snyk scan or not, set SNYK_TOKEN as well
    required: false
    default: 'true'

  SNYK_VERSION:
    description: |
      SNYK Token for vul scanning
    required: false
    default: "v1.966.0"

outputs:
  TRIVY_COUNT:
    description: Number of vulnerables in trivy scan
    value: ${{ steps.scan-report.outputs.TRIVY_COUNT }}
  GRYPE_COUNT:
    description: Number of vulnerables in Grype scan
    value: ${{ steps.scan-report.outputs.GRYPE_COUNT }}
  SNYK_COUNT:
    description: Number of Vulnerables in Snyk scan
    value: ${{ steps.scan-report.outputs.SNYK_COUNT }}

runs:
  using: composite

  steps:
    - uses: docker/login-action@bb984efc561711aaa26e433c32c3521176eae55b # v1.13.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - id: scan-start
      run: |
        echo ::set-output name=date::$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")
      shell: bash

    - id: install-snyk
      name: Run Snyk to check Docker image for vulnerabilities
      shell: bash
      env:
        SNYK_TOKEN: ${{ inputs.SNYK_TOKEN }}
        SNYK_VERSION: ${{ inputs.SNYK_VERSION }}
      run: |
        set -ex
        
        SNYK_DOWNLOAD="snyk-linux"
        
        if [ "$RUNNER_OS" == "Linux" ]; then
          SNYK_DOWNLOAD="snyk-linux"
        elif [ "$RUNNER_OS" == "Windows" ]; then
          SNYK_DOWNLOAD="snyk-win.exe"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          SNYK_DOWNLOAD="snyk-macos"
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi
          
        curl -s -o snyk https://static.snyk.io/cli/${SNYK_VERSION}/${SNYK_DOWNLOAD}
        
        echo "SNYK_VERSION=${SNYK_VERSION}" >> GITHUB_ENV
        echo "SNYK_URL=https://static.snyk.io/cli/${SNYK_VERSION}/${SNYK_DOWNLOAD}" >> GITHUB_ENV
        
        chmod +x snyk

    - name: Run Snyk to check Docker image for vulnerabilities
      id: snyk-scan
      shell: bash
      env:
        SNYK_TOKEN: ${{ inputs.SNYK_TOKEN }}
      run: |
        ./snyk container test ${{ inputs.image }} \
        --app-vulns --json --severity-threshold=low \
        --json-file-output=snyk.json >/dev/null || true
        
        echo ::set-output name=SNYK_RESULTS::$(cat snyk.json)
        echo ::set-output name=date::$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")
        

    - name: Cosign Attest Snyk results
      uses: strongjz/distroless-actions/attest@scans
      id: snyk-attest
      with:
        BUILDER_URI: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SCANNER_URI: ${SNYK_URL}
        SCANNER_VER: ${SNYK_VERSION}
        SCANNER_START: ${{ steps.scan-start.outputs.date }}
        SCANNER_FIN: ${{ steps.snyk-scan.outputs.date }}
        SCANNER_RESULTS: ${{ steps.snyk-scan.outputs.SNYK_RESULTS }}
        EVENT_ID: ${{ github.run_id }}
        BUILDER_ID: ${{ github.workflow }}
        IMAGE: ${{ inputs.image }}
        TYPE: "vuln"
        PREFIX: "snyk-"
        REGISTRY: ${{ inputs.registry }}
        USERNAME: ${{ inputs.username }}
        PASSWORD: ${{ inputs.password }}

    - name:  Scan image with AquaSec/Trivy
      uses: aquasecurity/trivy-action@0105373003c89c494a3f436bd5efc57f3ac1ca20 #v0.5.1
      id: trivy-scan
      with:
        image-ref: ${{ inputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 0
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'

    - name: Trivy Metadata
      id: trivy-meta
      shell: bash
      run: |
        export TRIVY_SCANNER_URI=$(cat trivy-results.sarif | jq .runs[0].tool.driver.informationUri)
        export TRIVY_VERSION=$(cat trivy-results.sarif | jq .runs[0].tool.driver.version)
        
        echo "TRIVY_SCANNER_URI: $TRIVY_SCANNER_URI"
        echo "TRIVY_VERSION: $TRIVY_VERSION"
        
        echo ::set-output name=TRIVY_SCANNER_URI::$TRIVY_SCANNER_URI
        echo ::set-output name=TRIVY_VERSION::$TRIVY_VERSION
        echo ::set-output name=TRIVY_RESULTS::$(cat trivy-results.sarif )
        echo ::set-output name=date::$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")

    - name: Cosign Attest trivy results
      uses: strongjz/distroless-actions/attest@scans
      id: trivy-attest
      with:
        BUILDER_URI: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SCANNER_URI: ${{ steps.trivy-meta.outputs.TRIVY_SCANNER_URI }}
        SCANNER_VER: ${{ steps.trivy-meta.outputs.TRIVY_VERSION }}
        SCANNER_START: ${{ steps.scan-start.outputs.date }}
        SCANNER_FIN: ${{ steps.trivy-meta.outputs.date }}
        SCANNER_RESULTS: ${{ steps.trivy-meta.outputs.TRIVY_RESULTS }}
        EVENT_ID: ${{ github.run_id }}
        BUILDER_ID: ${{ github.workflow }}
        IMAGE: ${{ inputs.image }}
        TYPE: "vuln"
        PREFIX: "trivy-"
        REGISTRY: ${{ inputs.registry }}
        USERNAME: ${{ inputs.username }}
        PASSWORD: ${{ inputs.password }}

    - name: Scan image with Anchore/Grype
      id: grype-scan
      uses: anchore/scan-action@ecfd0e98932e57ea8f68f29c4f418fc41a8194db
      with:
        image: ${{ inputs.image }}
        fail-build: false
        severity-cutoff: low

    - name: grype Metadata
      id: grype-meta
      shell: bash
      run: |
        export GRYPE_SCANNER_URI=$(cat ${{ steps.grype-scan.outputs.sarif }} | jq .runs[0].tool.driver.informationUri)
        export GRYPE_VERSION=$(cat ${{ steps.grype-scan.outputs.sarif }} | jq .runs[0].tool.driver.version)
        
        echo "GRYPE_SCANNER_URI: $GRYPE_SCANNER_URI"
        echo "GRYPE_VERSION: $GRYPE_VERSION"
        
        echo ::set-output name=GRYPE_SCANNER_URI::$GRYPE_SCANNER_URI
        echo ::set-output name=GRYPE_VERSION::$GRYPE_VERSION
        
        echo ::set-output name=date::$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")

    - name: Cosign Attest trivy results
      uses: strongjz/distroless-actions/attest@scans
      id: grype-attest
      with:
        BUILDER_URI: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SCANNER_URI: ${{ steps.grype-meta.outputs.GRYPE_SCANNER_URI }}
        SCANNER_VER: ${{ steps.grype-meta.outputs.GRYPE_VERSION }}
        SCANNER_START: ${{ steps.scan-start.outputs.date }}
        SCANNER_FIN: ${{ steps.grype-meta.outputs.date }}
        SCANNER_RESULTS: ${{ steps.grype-scan.outputs.sarif }}
        EVENT_ID: ${{ github.run_id }}
        BUILDER_ID: ${{ github.workflow }}
        IMAGE: ${{ inputs.image }}
        TYPE: "vuln"
        PREFIX: "gryp-"
        REGISTRY: ${{ inputs.registry }}
        USERNAME: ${{ inputs.username }}
        PASSWORD: ${{ inputs.password }}

    - name: High Level Scan report
      id: scan-report
      shell: bash
      env:
        RUN_SNYK: ${{ inputs.RUN_SNYK }}
      run: |
 
        GRYPE_COUNT=$(cat ${{ steps.grype-scan.outputs.sarif }} | jq '.runs[0].results | length')
        TRIVY_COUNT=$(cat trivy-results.sarif | jq '.runs[0].results | length')
        
        if [[ ${RUN_SNYK} == "true" ]]; then 
          SNYK_COUNT=$(cat snyk.json | jq .uniqueCount)
          echo "::set-output name=SNYK_COUNT::$SNYK_COUNT"
          echo "SNYK_COUNT: $SNYK_COUNT, GRYPE_COUNT: $GRYPE_COUNT, TRIVY_COUNT: $TRIVY_COUNT"
        else
          echo "GRYPE_COUNT: $GRYPE_COUNT, TRIVY_COUNT: $TRIVY_COUNT"
          echo "::set-output name=SNYK_COUNT::0"
        fi        
                
        echo "::set-output name=GRYPE_COUNT::$GRYPE_COUNT"
        echo "::set-output name=TRIVY_COUNT::$TRIVY_COUNT"     
